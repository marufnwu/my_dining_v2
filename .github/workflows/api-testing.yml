name: API Testing with Postman

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  api-tests:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: my_dining_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Copy environment file
      run: cp .env.example .env

    - name: Generate application key
      run: php artisan key:generate

    - name: Configure database
      run: |
        echo "DB_CONNECTION=mysql" >> .env
        echo "DB_HOST=127.0.0.1" >> .env
        echo "DB_PORT=3306" >> .env
        echo "DB_DATABASE=my_dining_test" >> .env
        echo "DB_USERNAME=root" >> .env
        echo "DB_PASSWORD=password" >> .env

    - name: Run migrations
      run: php artisan migrate --force

    - name: Seed database
      run: php artisan db:seed --force

    - name: Start Laravel server
      run: php artisan serve --host=0.0.0.0 --port=8000 &
      env:
        APP_ENV: testing

    - name: Wait for server
      run: sleep 10

    - name: Install Newman (Postman CLI)
      run: npm install -g newman

    - name: Run Postman Collection
      run: |
        newman run postman/My_Dining_v2_Meal_Request_API.postman_collection.json \
        --environment postman/development.postman_environment.json \
        --env-var "base_url=http://localhost:8000" \
        --reporters html,cli \
        --reporter-html-export newman-report.html
      continue-on-error: true

    - name: Upload Newman Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: newman-report
        path: newman-report.html

    - name: Check API Health
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/api/v1/health || echo "000")
        if [ "$response" != "200" ]; then
          echo "API health check failed with status: $response"
          exit 1
        fi
        echo "API health check passed"

  notify-on-failure:
    needs: api-tests
    runs-on: ubuntu-latest
    if: failure()
    steps:
    - name: Notify failure
      run: |
        echo "API tests failed! Check the logs and Newman report for details."
        echo "::error::API testing pipeline failed"
